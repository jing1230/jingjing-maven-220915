<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在Java程序中，必须找到当前的Mapper配置文件，才能进一步找到这里配置的SQL语句 -->
<!-- Java程序就是通过mapper标签的namespace属性找到当前Mapper配置文件 -->
<!-- 将来为了让一个Java接口，直接对应这个Mapp|er配置文件，通常使用Java接口的全类名作为这个namespace属性的值 -->
<!-- 以前我们叫dao，现在叫mapper，本质上都是持久化层的类型，只是命名习惯的区别 -->
<mapper namespace="jingjing.mybatis.dao.OrderMapper">


    <resultMap id="selectOrderWithCustomerResultMap" type="jingjing.mybatis.entity.Order">
        <!-- 映射Order本身的属性-->
        <id column="order_id" property="orderId"></id>
        <id column="order_name" property="orderName"></id>
        <!--association标签：映射对一关系：给Customer属性填充数据-->
        <association property="customer" javaType="jingjing.mybatis.entity.Customer">
            <id column="customer_id" property="customerId"></id>
            <id column="customer_name" property="customerName"></id>
        </association>
    </resultMap>
    <select id="selectOrderWithCustomer" resultMap="selectOrderWithCustomerResultMap">
        select order_id,order_name,c.customer_id,c.customer_name
        from t_order o left join t_customer c on o.customer_id = c.customer_id
        where order_id=#{orderId};
    </select>
</mapper>