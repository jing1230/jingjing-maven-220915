<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在Java程序中，必须找到当前的Mapper配置文件，才能进一步找到这里配置的SQL语句 -->
<!-- Java程序就是通过mapper标签的namespace属性找到当前Mapper配置文件 -->
<!-- 将来为了让一个Java接口，直接对应这个Mapp|er配置文件，通常使用Java接口的全类名作为这个namespace属性的值 -->
<!-- 以前我们叫dao，现在叫mapper，本质上都是持久化层的类型，只是命名习惯的区别 -->
<mapper namespace="jingjing.mybatis.dao.EmployeeMapper">

    <!-- select语句使用select标签 -->
    <!-- insert语句使用insert标签 -->
    <!-- update语句使用update标签 -->
    <!-- delect语句使用delect标签 -->

    <!-- 在select标签中编写一条select语句实现查询效果 -->
    <!-- id属性：这条SQL语句的唯一标识 -->
    <!-- resultType属性：Mybatis负责解析结果集，将解析得到的数据封装到Java类型中。resultType属性就是指定这个Java类型 -->
    <select id="selectEmpById" resultType="jingjing.mybatis.entity.Emp">
        <!-- #{empId}这里是为了方便接收Java程序传过来的参数数据 -->
        <!-- Mybatis负责将#{empId}部分转换为"?"占位符 -->
        <!--select  emp_id empId, emp_name empName, emp_salary empSalary  或者直接如下（但需要在全局配置文件mybatis.config.xml中配置驼峰式命名）-->
        select   emp_id,  emp_name,  emp_salary
        from t_emp
        where emp_id=#{empId}
    </select>

    <insert id="insertEmp">
        insert into t_emp(emp_name,emp_salary) values (#{empName},#{empSalary})
    </insert>

    <delete id="deleteById">
        delete from t_emp where emp_id=#{empId}
    </delete>

    <update id="updateEmp">
        update t_emp set emp_name=#{empName},emp_salary=#{empSalary} where emp_id=#{empId}
    </update>

    <select id="selectEmpByName" resultType="jingjing.mybatis.entity.Emp">
        select emp_id empId,emp_name empName,emp_salary empSalary
        from t_emp
        where emp_name like "%${empName}%"
    </select>

    <update id="updateSalaryById">
        update t_emp set emp_salary=#{empSalary} where emp_id=#{empId}
    </update>

    <update id="updateByMap">
        <!-- /*testUpdateEmpByMap测试类中的key-->
        update t_emp
        set emp_name=#{empNameKey},emp_salary=#{empSalaryKey}
        where emp_id=#{empIdKey}
    </update>

    <select id="selectCount" resultType="int">
        select count(*) from t_emp
    </select>

    <select id="selectForMap" resultType="map">
        select emp_id,emp_name,emp_salary
        from t_emp
        where emp_id=#{empId}
    </select>


    <select id="selectAll" resultType="jingjing.mybatis.entity.Emp">
    <!-- resultType 指定集合中的实体类类型即可，不需要考虑外面的集合类型 -->
        select emp_id,emp_name,emp_salary
        from t_emp
    </select>

    <insert id="insertWithKey" useGeneratedKeys="true" keyProperty="empId">
        insert into t_emp(emp_name,emp_salary) values (#{empName},#{empSalary})
    </insert>


    <resultMap id="selectWithResultMapResultMap" type="jingjing.mybatis.entity.Emp">
        <!-- 使用result标签声明对应关系-->
        <id column="emp_id" property="empId"></id>
        <!--<result column="emp_id" property="empId"></result>-->
        <result column="emp_name" property="empName"></result>
        <result column="emp_salary" property="empSalary"></result>
    </resultMap>

    <!-- 在select标签的resultMap属性中引用配套的resultMap-->
    <select id="selectWithResultMap" resultMap="selectWithResultMapResultMap" >
        select emp_id,emp_name,emp_salary
        from t_emp
    </select>

</mapper>